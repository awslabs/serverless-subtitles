AWSTemplateFormatVersion: "2010-09-09"

Description:
  Compute layer for subtitle demonstration

Resources:
  SUBLambdaFunctionStart:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return True
      Description: "Start the subtitle process"
      FunctionName: SUBLambdaFunctionStart
      Handler: "index.handler"
      Role: !ImportValue "SUBLambdaStartRole"
      Runtime: "python3.7"
      Timeout: 10

  SUBLambdaFunctionTranscode:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return True
      Description: "Transcode a S3 file and update the state in dynamodb"
      FunctionName: SUBLambdaFunctionTranscode
      Handler: "index.handler"
      Role: !ImportValue "SUBLambdaTranscodeRole"
      Runtime: "python3.7"
      Timeout: 10

  SUBLambdaFunctionTranscribe:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return True
      Description: "Transcribe a mp3 file and update the state in dynamodb"
      FunctionName: SUBLambdaFunctionTranscribe
      Handler: "index.handler"
      Role: !ImportValue "SUBLambdaTranscribeRole"
      Runtime: "python3.7"
      Timeout: 10

  SUBLambdaFunctionTranscribeIsOver:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return True
      Description: "Check that transcription is over"
      FunctionName: SUBLambdaFunctionTranscribeIsOver
      Handler: "index.handler"
      Role: !ImportValue "SUBLambdaTranscribeIsOverRole"
      Runtime: "python3.7"

  SUBLambdaFunctionTranslate:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return True
      Description: "Make a subtitle file, translate this file and update the state in dynamodb"
      FunctionName: SUBLambdaFunctionTranslate
      Handler: "index.handler"
      Role: !ImportValue "SUBLambdaTranslateRole"
      Runtime: "python3.7"
      Timeout: 60

  SUBLambdaFunctionOutput:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
            return True
      Description: "Transcode a S3 file and update the state in dynamodb"
      FunctionName: SUBLambdaFunctionOutput
      Handler: "index.handler"
      Role: !ImportValue "SUBLambdaOutputRole"
      Runtime: "python3.7"
      Timeout: 10

Outputs:
  SUBLambdaFunctionStart:
    Value: !GetAtt SUBLambdaFunctionStart.Arn
    Description: "Lambda that start everything"
    Export:
      Name: SUBLambdaFunctionStart
  SUBLambdaFunctionTranscode:
    Value: !GetAtt SUBLambdaFunctionTranscode.Arn
    Description: "Lambda that transcodes"
    Export:
      Name: SUBLambdaFunctionTranscode
  SUBLambdaFunctionTranscribe:
    Value: !GetAtt SUBLambdaFunctionTranscribe.Arn
    Description: "Lambda that transcribes"
    Export:
      Name: SUBLambdaFunctionTranscribe
  SUBLambdaFunctionTranscribeIsOver:
    Value: !GetAtt SUBLambdaFunctionTranscribeIsOver.Arn
    Description: "Lambda check that transcription is over"
    Export:
      Name: SUBLambdaFunctionTranscribeIsOver
  SUBLambdaFunctionTranslate:
    Value: !GetAtt SUBLambdaFunctionTranslate.Arn
    Description: "Lambda that translates"
    Export:
      Name: SUBLambdaFunctionTranslate
  SUBLambdaFunctionOutput:
    Value: !GetAtt SUBLambdaFunctionOutput.Arn
    Description: "Lambda that outputs"
    Export:
      Name: SUBLambdaFunctionOutput
